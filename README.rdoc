This example shows:
1. When to delete a test?
2. The 'Breaking Out' concept discussed in Growing OO system guided by tests. By applying separation of 
	 concerns we have created a new object PaypalService that interacts with Paypal API.
3. How to speed up unit tests? Can you run the tests with disconnected from network connection?

1. The first few tests were written by copying the steps 1 - 6 from Paypal IPN Guide.
2. Read the ActiveMerchant tests to learn about the plugin. 
3. The initial version of the tests were more like ActiveMerchant learning tests and tightly coupled to the 	
	 implementation. Therefore the tests were brittle as the refactoring forced data to be hidden.
4. Deleted tests that were not related to controller responsibilities. These were scaffolding tests
   that gave quick feedback and allowed us to build the system.
5. Moved those tests to layer below that provides the service to Paypal API.
6. Notice the mocking of the Paypal service API in the controller specs.
7. The first version of specs for PaypalService object has shown us the need for PaypalNotification active
   record object for most of the checks. PaypalService will delegate the checks to the persistant object and
   make most of the methods as private. Only process_payment class method will be public. The specs will be
   moved to ActiveRecord object tests for PaypalNotification.
8. Surprised to see how injecting dependencies to make the test run faster resulted in decorator pattern.
9. The has_correct_amount can be made private, the tests will require testing it indirectly using
   the method transaction_has_correct_amount which requires transaction_id to be set and the
   record to be saved. It became a trade-off between test speed vs encapsulation. If this library
   is for internal use we can choose has_correct_amount to be public.


To Do :

1. Setup Paypal Sandbox accounts for seller and buyer with credit card and bank accounts.
2. Integrate the app to Paypal Express Checkout.
3. Create Payment model and store Paypal transaction_id.
    - status = notify.status
    - confirmation = notify.transaction_id Paypal transaction_id
    - user_id
    - amount = notify.amount
    - timestamps
		- order_id
		- pay_method = 'Paypal'
		- description != notify.params['item_name] (Use custom variable to store the id of the record that contains the pass through variable fields stored locally)
		- test = notify.test?
4. Find the subject field in the latest Paypal API docs
5. Find the Third-Part API Grant access screen in the current Paypal website.


0. Write Integration Test that hits the Paypal sandbox

1. email a password to your customer for downloading digital media.
   Asynchronus process
   IPN allows you to automatically update a database with the transaction details, send a customized order confirmation email message to the buyer
2. Validate that the receiver’s email address, receiver_email is registered 
   to you (the merchant) to make sure that this is not a spoof
3. Store txn_id in database so that only unique transactions
   are processed 
4. Use a separate logger for IPN messages in Paypal IPN controller.
5. Use the item id to find the order id that is combined with other pass
   through variables.
6. If the verified response passes the checks,take action based on the 
   value of the txn_type variable if it exists; otherwise, take action based on the value of the reason_code variable.
7. If the response is INVALID or the response code is not 200, save the 
   message for further investigation.
8. business - Email address or account ID of the payment recipient (that 
   is, the merchant). Equivalent to the values of receiver_email (if payment is sent to primary account) and business set in the Website Payment HTML

   The value of this variable is normalized to lowercase characters.
   Length: 127 characters.
9. custom - Custom value as passed by you, the merchant. These are pass-
   through variables that are never presented to your customer 
   Length: 255 characters
10. receiver_email - Primary email address of the payment recipient (that 
    is, the merchant). If the payment is sent to a non-primary email address on your PayPal account, the receiver_email is still your primary email.

    The value of this variable is normalized to lowercase characters.
    Length: 127 characters
11. receiver_id - Unique account ID of the payment recipient (i.e., the 
    merchant). This is the same as the recipient's referral ID.
    Length: 13 characters
12. txn_id - The merchant’s original transaction identification number for 
    the payment from the buyer, against which the case was registered.

13. payer_email Customer’s primary email address. Use this email to provide 
    any credits. Length: 127 characters
14. mc_gross - Full amount of the customer's payment, before transaction 
    fee is subtracted. Equivalent to payment_gross for USD payments. If this
    amount is negative, it signifies a refund or reversal, and either of those payment statuses can be for the full or partial amount of the original transaction.
15. payer_status - Whether the customer has a verified PayPal account.
16. payment_date - Time/Date stamp generated by PayPal.
    Length: 28 characters

----------------------------------------------------------------------------------------
PayPal IPN using Active merchant

https://gist.github.com/1502215
		https://github.com/Shopify/active_merchant/blob/master/lib/active_merchant/billing/integrations/paypal/notification.rb
http://www.fortytwo.gr/blog/14/Using-Paypal-with-Rails
http://www.volcanic.co.uk/ruby-on-rails/author/brian/
http://activemerchant.rubyforge.org/classes/ActiveMerchant/Billing/Integrations/Paypal/Notification.html

----------------------------------------------------------------------------------------

require 'uri'
require 'net/http'
require 'net/https'

#   class BackendController < ApplicationController
#     include ActiveMerchant::Billing::Integrations
#
#     def paypal_ipn
#       notify = Paypal::Notification.new(request.raw_post)
#   
#       order = Order.find(notify.item_id)
#     
#       if notify.acknowledge 
#           payment = Payment.find_by_confirmation(notify.transaction_id) ||
#           Payment.create(:amount => notify.amount,
#                          :payment_method => 'paypal', 
#                          :confirmation => notify.transaction_id,
#                          :description => notify.params['item_name'], 
#                          :status => notify.status,
#                          :test => notify.test?)

#         begin
#           
#           if notify.complete? and order.total == notify.amount
#             order.status = 'success' 
#             payment.status = notify.status
#             shop.ship(order)
#           else
#             logger.error("Failed to verify Paypal's notification, please investigate")
#           end
#   
#         rescue => e
#           order.status        = 'failed'  
#           payment.status = 'Error'    
#           raise
#         ensure
#           order.save
#           payment.save
#         end
#       end
#   
#       render :nothing
#     end
#   end