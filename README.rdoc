This example shows:
1. When to delete a test?
2. The 'Breaking Out' concept discussed in Growing OO system guided by tests. By applying separation of 
	 concerns we have created a new object PaypalService that interacts with Paypal API.

1. The first few tests were written by copying the steps 1 - 6 from Paypal IPN Guide.
2. Read the ActiveMerchant tests to learn about the plugin. 
3. The initial version of the tests were more like ActiveMerchant learning tests and tightly coupled to the 	
	 implementation. Therefore the tests were brittle as the refactoring forced data to be hidden.
4. Deleted tests that were not related to controller responsibilities. These were scaffolding tests
   that gave quick feedback and allowed us to build the system.
5. Moved those tests to layer below that provides the service to Paypal API.
6. Notice the mocking of the Paypal service API in the controller specs.
7. 



require 'uri'
require 'net/http'
require 'net/https'
def notify
    notify = Paypal::Notification.new(request.raw_post)
    enrollment = Enrollment.find(notify.item_id)

    if notify.acknowledge
      @payment = Payment.find_by_confirmation(notify.transaction_id) ||
        enrollment.invoice.payments.create(:amount => notify.amount,
          :payment_method => 'paypal', :confirmation => notify.transaction_id,
          :description => notify.params['item_name'], :status => notify.status,
          :test => notify.test?)
      begin
        if notify.complete?
          @payment.status = notify.status
        else
          logger.error("Failed to verify Paypal's notification, please investigate")
        end
      rescue => e
        @payment.status = 'Error'
        raise
      ensure
        @payment.save
      end
    end
    render :nothing => true
  end